{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CyberITDad","text":"<p>A safe area for sharing knowledge and experiences.</p> <p></p> <p>About myself:</p> <ul> <li>Ex-Chef</li> <li>CyberSecurity Analyst, Backend Developer</li> <li>Crazy about AI, Machine Learning and Home Automation</li> </ul> <p></p> <p>I have created this site in mind to:</p> <ul> <li>Share knowledge that I have learnt and experienced through the years</li> <li>Share my thoughts on various topics related to technology, programming, and more.</li> <li>Provide a platform for people who are interested in learning and growing together.</li> </ul> <p></p>"},{"location":"#key-areas-of-focus","title":"Key Areas of Focus","text":"<ol> <li> <p>Technology </p> <ul> <li>Steps and Tips on setting up various applications locally</li> <li>Projects relating to AI and Machine Learning (WIP)</li> <li>Setting up Docker containers and environments for local development environments</li> <li>Security best practices (WIP)</li> <li>Articles on various topics related to technology and programming (WIP)</li> <li>Home Automation (Smart Home, IoT, etc.) (WIP)</li> </ul> </li> <li> <p>Food Recipes (WIP) </p> </li> <li>Travel Experiences (WIP) </li> </ol>"},{"location":"applications/main/","title":"Self-Hosted Applications (Local Server Setup)","text":"<p>This is one of the project that I am working on. It involves setting up a local server for my home network. The diagram above shows how the different devices are connected to each other. The purpose of this project is to:</p> <ul> <li>Gain knowledge about setting up and configuring servers.</li> <li>Improve my skills in managing internal networks.</li> <li>Ensure that all devices in my home network can communicate with each other seamlessly.</li> <li>Understand the fundamentals of the OSI model and how it applies to local networks.</li> <li>Understand and implement basic connectivity between different docker nodes and containers.</li> <li>Understand and implement basic security measures for the server.</li> </ul>"},{"location":"applications/main/#machine-and-technologies-used","title":"Machine and Technologies Used","text":"<ul> <li>Mac Mini M2 (MacOS)</li> <li>24GB RAM</li> <li>512GB SSD </li> <li>Docker</li> <li>PyEnv</li> </ul>"},{"location":"applications/main/#knowledge-used-and-gained","title":"Knowledge Used and Gained","text":"<p>In this project, I have gained knowledge about setting up and configuring servers. I have also improved my skills in managing internal networks. Additionally, I have learned how to ensure that all mobile devices, whether in home or external network, can reach to the applications hosted in the server. I have also understood the fundamentals of the OSI model and how it applies to local networks. Furthermore, I have implemented basic connectivity between different docker nodes and containers. Finally, I have learned how to implement basic security measures for the server.</p>"},{"location":"applications/main/#applications-hosted-in-the-server","title":"Applications Hosted In The Server","text":"<ul> <li>Twingate -&gt; A secure access solution that allows users to connect to internal resources securely</li> <li>Nginx Proxy Manager -&gt; A web-based proxy manager that simplifies the process of setting up and managing reverse proxies</li> <li>Ollama -&gt; An app that hosts various type of AI models, running locally on a server</li> <li>Openweb UI -&gt; A web-based user interface with various services and function to access and run AI models</li> </ul>"},{"location":"applications/npm/","title":"Nginx Proxy Manager: A Comprehensive Guide","text":"<p>In the realm of modern application architectures, managing proxies efficiently is crucial, especially in environments utilizing microservices and containers. Nginx Proxy Manager (NPM) emerges as a powerful tool tailored for this need. This article delves into its features, use cases, and how it compares to Traefik.</p>","tags":["Docker","Nginx Proxy Manager","Let's Encrypt","Self-Signed Certificates","Step-By-Step"]},{"location":"applications/npm/#introduction","title":"Introduction","text":"<p>Nginx Proxy Manager is an open-source solution designed to streamline proxy management within containerized environments. It excels in handling HTTP/HTTPS traffic, load balancing, and security, making it indispensable for Docker setups and beyond.</p>","tags":["Docker","Nginx Proxy Manager","Let's Encrypt","Self-Signed Certificates","Step-By-Step"]},{"location":"applications/npm/#key-features-of-nginx-proxy-manager","title":"Key Features of Nginx Proxy Manager","text":"<ol> <li>Dynamic Configuration via HTTP API: Enables real-time changes without service interruptions.</li> <li>Protocol Support: Manages HTTP/HTTPS, TCP, and UDP traffic efficiently.</li> <li>Load Balancing: Implements algorithms like round-robin and least connections for optimal traffic distribution.</li> <li>Reverse Proxy Capabilities: Conceals backend services, enhancing security and abstraction.</li> <li>SSL Termination: Handles encrypted traffic and certificate management seamlessly.</li> <li>Docker Integration: Automatically detects new containers and configures proxies accordingly.</li> </ol>","tags":["Docker","Nginx Proxy Manager","Let's Encrypt","Self-Signed Certificates","Step-By-Step"]},{"location":"applications/npm/#uses-cases","title":"Uses Cases","text":"<ul> <li>Docker Environment Management: Automates proxy configuration for multiple services.</li> <li>Kubernetes Ingress Traffic: Manages ingress controllers efficiently.</li> <li>SSL Termination: Secures connections by offloading SSL/TLS responsibilities.</li> <li>API Gateway Functionality: Serves as a reverse proxy for API gateways.</li> </ul>","tags":["Docker","Nginx Proxy Manager","Let's Encrypt","Self-Signed Certificates","Step-By-Step"]},{"location":"applications/npm/#comparison-with-traefik","title":"Comparison with Traefik","text":"Feature Nginx Proxy Manager Traefik Configuration Method GUI, JSON/HTTP API YAML, CRDs (Kubernetes) Automation Limited automation; more manual control Highly automated with CI/CD integration Dynamic Reconfiguration Requires manual intervention Auto-reconfigures based on infrastructure changes Performance High-performance due to Nginx engine Efficient but may lag in high-concurrency scenarios Use Case Focus Ideal for Docker setups needing control Best for dynamic environments and microservices","tags":["Docker","Nginx Proxy Manager","Let's Encrypt","Self-Signed Certificates","Step-By-Step"]},{"location":"applications/npm/#installation","title":"Installation","text":"<p>Deploying NPM in docker is quite straightforward:</p> <pre><code>    volumes:\n        nginxproxymanager-data:\n        nginxproxymanager-ssl:\n        nginxproxymanager-db:\n    services:\n        nginxproxymanager:\n            image: docker.io/jc21/nginx-proxy-manager:2.12.1\n            ports:\n                - 80:80\n                - 81:81 # This is the npm interface\n                - 443:443\n            environment:\n                - DB_MYSQL_HOST=nginxproxymanager-db\n                - DB_MYSQL_PORT=3306\n                - DB_MYSQL_USER=dbuser # It has to be the same as the npm DB user\n                - DB_MYSQL_PASSWORD=dbpassword # It has to be the same as the npm DB password\n                - DB_MYSQL_NAME=npm # It has to be the same as the npm DB name\n            volumes:\n                - nginxproxymanager-data:/data\n                - nginxproxymanager-ssl:/etc/letsencrypt\n\n        nginxproxymanager-db:\n            image: docker.io/jc21/mariadb-aria:10.11.5\n            environment:\n            - MYSQL_ROOT_PASSWORD=npm\n            - MYSQL_DATABASE=npm\n            - MYSQL_USER=dbuser\n            - MYSQL_PASSWORD=dbpassword\n            volumes:\n            - nginxproxymanager-db:/var/lib/mysql\n</code></pre>","tags":["Docker","Nginx Proxy Manager","Let's Encrypt","Self-Signed Certificates","Step-By-Step"]},{"location":"applications/npm/#conclusion","title":"Conclusion","text":"<p>Nginx Proxy Manager excels with its user-friendly GUI, manual configuration options, and superior performance, making it ideal for Docker-centric environments. Traefik, on the other hand, shines in automated, dynamic setups, particularly within Kubernetes clusters. The choice between them hinges on specific project needs and architectural preferences.</p>","tags":["Docker","Nginx Proxy Manager","Let's Encrypt","Self-Signed Certificates","Step-By-Step"]},{"location":"applications/ollama/","title":"Ollama - Your Local LLM Server","text":"","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#description","title":"Description","text":"<p>Ollama is an open source project that aims to provide a local language model server. It is designed to be easy to use and deploy, making it accessible for developers and researchers alike. Ollama is versatile and can be used in various applications such as chatbots, virtual assistants, and more. The community working on Ollama provides support and resources to help users get started with Ollama, and also provides different models for users to use.</p> <p>Ollama can be installed on different platforms such as Linux, MacOS, and Windows. The installation process is straightforward and can be completed in a few minutes. It also supports docker.</p>","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#purpose-of-having-a-local-llm","title":"Purpose of Having a Local LLM","text":"<p>Having a local LLM server allows organizations which have restrictions for using AI. It gives them the flexibility to use AI without worrying about compliance issues, as they can control their own infrastructure. It also allows organizations to have more control over their data and avoid privacy concerns associated with cloud-based solutions.</p>","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#uses","title":"Uses","text":"<ul> <li>Chatbots</li> <li>Virtual Assistants</li> <li>Language Translation</li> <li>Text Summarization</li> <li>Sentiment Analysis</li> <li>Question Answering</li> <li>Code Completion / Refactoring / Debugging</li> </ul>","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#installation","title":"Installation","text":"","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#macos","title":"MacOS","text":"<p>You can use download from Ollama offical website or install via Homebrew.</p>","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#linux","title":"Linux","text":"<p>Run the following command to install ollama: <pre><code>curl -fsSL https://ollama.com/install.sh | sh\n</code></pre></p>","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#windows","title":"Windows","text":"<p>You can use download from Ollama offical website or install via Chocolatey.</p>","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#docker","title":"Docker","text":"<p>The official Ollama Docker image ollama/ollama is available on Docker Hub.</p>","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/ollama/#docker-with-restriction","title":"Docker (With Restriction)","text":"<p>If you are unable to create a Docker container using the official Ollama Docker image, you can use the following Dockerfile to build your own. The Dockerfile is hosted in my Github Repo.</p>","tags":["Docker","Ollama","Local AI","Step-By-Step"]},{"location":"applications/openwebui/","title":"Exploring OpenWeb UI: The Chat Interface for Ollama","text":"<p>In the rapidly evolving landscape of artificial intelligence and language models, having a user-friendly interface to interact with these powerful tools is essential. Enter OpenWeb UI, the chat interface designed specifically for Ollama, a platform that hosts AI models. This article delves into the functionalities of OpenWeb UI, its key features, and compares it with alternative interfaces like LangChain Chat and Rasa X.</p>","tags":["Docker","UI","Local AI","Chat Interface","Setup"]},{"location":"applications/openwebui/#introduction","title":"Introduction","text":"<p>Ollama is a tool that serves as a hub for hosting and managing AI language models. It allows users to deploy and interact with various AI models efficiently. OpenWeb UI acts as the front-end interface for Ollama, providing a seamless way to engage in chat-like interactions with these models. Whether you're a developer or an end-user, OpenWeb UI offers a user-friendly experience tailored for those looking to harness the power of AI through Ollama.</p>","tags":["Docker","UI","Local AI","Chat Interface","Setup"]},{"location":"applications/openwebui/#key-features-of-openweb-ui","title":"Key Features of OpenWeb UI","text":"<ol> <li>Real-Time Chat Functionality: </li> <li> <p>OpenWeb UI enables real-time communication with AI models. Users can type messages and receive instant responses, making it ideal for applications like customer service chatbots or interactive educational tools.</p> </li> <li> <p>Integration with Ollama:</p> </li> <li> <p>As the official interface for Ollama, OpenWeb UI seamlessly integrates with the platform, allowing users to manage different AI models hosted on Ollama. This integration ensures a smooth user experience, where you can switch between models or adjust settings like temperature and max tokens directly from the interface.</p> </li> <li> <p>User-Friendly Design:</p> </li> <li> <p>The interface is designed with ease of use in mind. Whether you're configuring settings or interacting with AI models, OpenWeb UI provides an intuitive layout that minimizes learning curves.</p> </li> <li> <p>Customization Options:</p> </li> <li> <p>OpenWeb UI offers customization features, allowing users to tailor the chat experience to their needs. This could include adjusting display preferences or setting up specific workflows for different use cases.</p> </li> <li> <p>Advanced Features:</p> </li> <li>Beyond basic chatting, OpenWeb UI may offer advanced functionalities such as context management, conversation history tracking, and integration with third-party tools, enhancing its utility in diverse applications.</li> </ol>","tags":["Docker","UI","Local AI","Chat Interface","Setup"]},{"location":"applications/openwebui/#functionality","title":"Functionality","text":"<p>The functionality of OpenWeb UI revolves around facilitating interactions with AI models through Ollama. Users can initiate chat sessions, receive real-time responses, and manage different models directly from the interface. The user experience is designed to be fluid, ensuring that both technical experts and non-experts can navigate it with ease.</p>","tags":["Docker","UI","Local AI","Chat Interface","Setup"]},{"location":"applications/openwebui/#comparison-with-alternatives","title":"Comparison with Alternatives","text":"<p>When comparing OpenWeb UI with other chat interfaces like LangChain Chat or Rasa X, several factors come into play:</p> <ul> <li> <p>Ease of Use: OpenWeb UI is known for its user-friendly design, which may give it an edge over more technical platforms like LangChain Chat.</p> </li> <li> <p>Integration Capabilities: As a dedicated interface for Ollama, OpenWeb UI offers deep integration with the platform, whereas alternatives might require additional setup to work seamlessly with Ollama.</p> </li> <li> <p>Customization and Features: While both OpenWeb UI and Rasa X offer customization options, OpenWeb UI's focus on real-time chat within the Ollama ecosystem may provide a more streamlined experience for users seeking direct interaction with AI models.</p> </li> </ul>","tags":["Docker","UI","Local AI","Chat Interface","Setup"]},{"location":"applications/openwebui/#installation","title":"Installation","text":"<p>Open WebUI has a 1 liner to deploy in Docker:</p> <pre><code>    services:\n    openwebui:\n        image: ghcr.io/open-webui/open-webui:main\n        ports:\n            - \"3000:8080\"\n        volumes:\n            - open-webui:/app/backend/data\n        extra_hosts:\n            - \"host.docker.internal:host-gateway\"\n        environment:\n            - OLLAMA_BASE_URL=http://host.docker.internal:11434\n        restart: unless stopped\n\n    volumes:\n        open-webui:\n</code></pre>","tags":["Docker","UI","Local AI","Chat Interface","Setup"]},{"location":"applications/openwebui/#conclusion","title":"Conclusion","text":"<p>OpenWeb UI stands out as a robust and user-friendly interface for interacting with AI models through Ollama. Its key features, including real-time chat functionality, seamless integration with Ollama, and customization options, make it a strong choice for developers and end-users alike. Whether you're building a chatbot or exploring the capabilities of AI models, OpenWeb UI offers a comprehensive toolset to meet your needs.</p> <p>In summary, OpenWeb UI is an excellent option for those looking to engage with AI models in a user-friendly environment, particularly within the Ollama ecosystem. Its unique blend of functionality and ease of use positions it as a valuable tool in the landscape of AI chat interfaces.</p>","tags":["Docker","UI","Local AI","Chat Interface","Setup"]},{"location":"applications/twingate/","title":"Twingate Connector - Local VPN Service","text":"<pre><code>services:\n  twingate_connector:\n    container_name: twingate_connector\n    image: docker.io/twingate/connector:1.73.0\n    environment:\n        - TWINGATE_NETWORK= # &lt;account name&gt;.twingate.com\n        - TWINGATE_ACCESS_TOKEN=\n        - TWINGATE_REFRESH_TOKEN=\n      # -- (Optional) Change loglevel\n      # - TWINGATE_LOG_LEVEL=3\n      # -- (Optional) Add custom DNS Server\n      # - TWINGATE_DNS=10.20.0.1\n    sysctls:\n      net.ipv4.ping_group_range: \"0 2147483647\"\n    # -- (Optional) When using a custom network\n    # networks:\n    #   - your-custom-network\n    restart: unless-stopped\n</code></pre>","tags":["Docker","Twingate","VPN","Step-By-Step"]},{"location":"blog/","title":"Posts / Walkthroughs / Recipes","text":""},{"location":"blog/very-first-post/","title":"Hi, this is my first post","text":"<p>Hi, being weird to have the first post.</p> <p>Will soon have more posts about various topics like tech and food recipes!</p> <p>Stay tuned!</p>","tags":["first post"]},{"location":"blog/local-ai-server-ollama/","title":"Ollama - Your Local LLM Server","text":"<p>Ollama is an open source project that aims to provide a local language model server. It is designed to be easy to use and deploy, making it accessible for developers and researchers alike.</p> <p> </p>","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#description","title":"Description","text":"<p>Ollama is an open source project that aims to provide a local language model server. It is designed to be easy to use and deploy, making it accessible for developers and researchers alike. Ollama is versatile and can be used in various applications such as chatbots, virtual assistants, and more. The community working on Ollama provides support and resources to help users get started with Ollama, and also provides different models for users to use.</p> <p>Ollama can be installed on different platforms such as Linux, MacOS, and Windows. The installation process is straightforward and can be completed in a few minutes. It also supports docker.</p>","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#purpose-of-having-a-local-llm","title":"Purpose of Having a Local LLM","text":"<p>Having a local LLM server allows organizations which have restrictions for using AI. It gives them the flexibility to use AI without worrying about compliance issues, as they can control their own infrastructure. It also allows organizations to have more control over their data and avoid privacy concerns associated with cloud-based solutions.</p>","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#uses","title":"Uses","text":"<ul> <li>Chatbots</li> <li>Virtual Assistants</li> <li>Language Translation</li> <li>Text Summarization</li> <li>Sentiment Analysis</li> <li>Question Answering</li> <li>Code Completion / Refactoring / Debugging</li> </ul>","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#installation","title":"Installation","text":"","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#macos","title":"MacOS","text":"<p>You can use download from Ollama offical website or install via Homebrew.</p>","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#linux","title":"Linux","text":"<p>Run the following command to install ollama: <pre><code>curl -fsSL https://ollama.com/install.sh | sh\n</code></pre></p>","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#windows","title":"Windows","text":"<p>You can use download from Ollama offical website or install via Chocolatey.</p>","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#docker","title":"Docker","text":"<p>The official Ollama Docker image ollama/ollama is available on Docker Hub.</p>","tags":["docker","ollama","local AI","step by step"]},{"location":"blog/local-ai-server-ollama/#docker-with-restriction","title":"Docker (With Restriction)","text":"<p>If you are unable to create a Docker container using the official Ollama Docker image, you can use the following Dockerfile to build your own. The Dockerfile is hosted in my Github Repo.</p>","tags":["docker","ollama","local AI","step by step"]},{"location":"projects/main/","title":"Projects","text":"<p>These are some of the projects that I have worked on or am currently working on. They cover a range of topics and technologies, including machine learning, AI and more. </p>"},{"location":"projects/main/#key-areas-of-focus","title":"Key Areas of Focus","text":""},{"location":"projects/main/#ai","title":"AI","text":"<ul> <li>Ollama Server Docker Image - A customized Docker image for running the Ollama server for restricted use cases</li> <li>Retrieval Augmented Generation (RAG): A project focused on building a Retrieval-Augmented Generation (RAG) system using various frameworks. (WIP)</li> <li>Agentic Chatbot - A project to build an agentic chatbot that can interact with users and provide assistance based on their needs. (WIP)</li> <li>Open WebUI: A project to create a local AI chatbot interface using OpenWeb UI platform. (WIP)</li> </ul>"},{"location":"projects/main/#slack","title":"Slack","text":"<ul> <li>Slack Bot: A project to build a Slack bot that can interact with users and provide assistance based on their needs. (WIP)</li> <li>Slack Integration with AI: A project to integrate AI into a Slack bot for enhanced functionality. (WIP)</li> </ul>"},{"location":"projects/main/#discord","title":"Discord","text":"<ul> <li>Discord Bot: A project to build a Discord bot that can interact with users and provide assistance based on their needs. (WIP)</li> <li>Discord Integration with AI: A project to integrate AI into a Discord bot for enhanced functionality. (WIP)</li> </ul>"},{"location":"projects/ollama_server_docker/","title":"Project: Ollama Server Docker","text":"","tags":["project","docker","ollama","llm","server","AI"]},{"location":"projects/ollama_server_docker/#github-ollama-server-docker","title":"Github: ollama-server-docker","text":"","tags":["project","docker","ollama","llm","server","AI"]},{"location":"projects/ollama_server_docker/#description","title":"Description","text":"<p>This project is a Docker container for running an Ollama language model server. The server can be used for various tasks such as text generation, question answering, and more.</p> <p>Ollama has its official docker image on Docker Hub. However, for this project, I have created a custom Dockerfile to build the server using its installation script. This allows any organisation or person to create their own Ollama server without having to get the Ollama Docker image from Docker Hub, which may be a restriction to some.</p>","tags":["project","docker","ollama","llm","server","AI"]},{"location":"projects/ollama_server_docker/#usage","title":"Usage","text":"<p>To use this project, you can deploy it in any cloud environment that supports Docker. I would advise to build the image, upload the image to the repository of your choice, and then to use Docker Compose or Kubernetes to manage the deployment.</p> <p>Apart from just deploying in a container, do remember to set up the necessary security configuration such as SSL certificates, proxy managers, firewalls etc. and load balancers to protect the server from potential threats, since it will be exposed to the internet.</p>","tags":["project","docker","ollama","llm","server","AI"]},{"location":"setting_up/docker/","title":"Docker - Containerization for Developers","text":"","tags":["set up","docker","container"]},{"location":"setting_up/docker/#description","title":"Description","text":"<p>Docker is a platform designed to simplify application deployment, scaling, and management across different environments. It enables developers to package applications into lightweight, portable containers that can run consistently on any system or cloud.</p> <p>It is a versatile platform that simplifies the process of building, deploying, and managing applications across different environments. Its key features make it an essential tool for developers and DevOps professionals looking to streamline their workflows.</p>","tags":["set up","docker","container"]},{"location":"setting_up/docker/#key-features","title":"Key Features","text":"<ol> <li>Portability: Containers are self-contained and consistent, allowing them to run in any environment.</li> <li>Efficiency: Shares the operating system kernel, reducing resource usage and startup time.</li> <li>Isolation: Ensures applications run in isolated environments, preventing conflicts between dependencies.</li> <li>Scalability: Easily scales applications up or down as needed using container orchestration tools.</li> <li>Security: Provides strong isolation and security features to protect against vulnerabilities.</li> </ol>","tags":["set up","docker","container"]},{"location":"setting_up/docker/#uses","title":"Uses","text":"<ul> <li>Development &amp; Testing: Consistent development environments across different teams and machines.</li> <li>Deployment: Simplifies deployment to various cloud platforms and on-premises environments.</li> <li>CI/CD: Facilitates continuous integration and delivery pipelines.</li> <li>Microservices: Enables the creation of loosely coupled services.</li> </ul>","tags":["set up","docker","container"]},{"location":"setting_up/docker/#installation-methods","title":"Installation Methods","text":"","tags":["set up","docker","container"]},{"location":"setting_up/docker/#1-windows-installation","title":"1. Windows Installation","text":"<ul> <li>Download Docker Desktop from the Docker website.</li> <li>Run the installer and follow the setup wizard to install Docker on Windows.</li> </ul>","tags":["set up","docker","container"]},{"location":"setting_up/docker/#2-macos-installation","title":"2. macOS Installation","text":"<ul> <li>Download Docker Desktop from the Docker website.</li> <li>Run the downloaded .dmg file and drag Docker to your Applications folder.</li> </ul>","tags":["set up","docker","container"]},{"location":"setting_up/docker/#3-linux-installation-ubuntu","title":"3. Linux Installation (Ubuntu)","text":"<ul> <li>Open a terminal and run:     <pre><code>    sudo apt-get update\n    sudo apt-get install docker-ce docker-ce-cli containerd.io\n</code></pre></li> <li>Verify installation by running <code>sudo docker --version</code>.</li> </ul>","tags":["set up","docker","container"]},{"location":"setting_up/docker/#4-linux-installation-centos","title":"4. Linux Installation (CentOS)","text":"<ul> <li>Open a terminal and run:     <pre><code>    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n    sudo yum install docker-ce docker-ce-cli containerd.io\n</code></pre></li> <li>Verify installation by running <code>sudo docker --version</code>.</li> </ul>","tags":["set up","docker","container"]},{"location":"setting_up/docker/#5-linux-installation-fedora","title":"5. Linux Installation (Fedora)","text":"<ul> <li>Open a terminal and run:     <pre><code>    sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\n    sudo dnf install docker-ce docker-ce-cli containerd.io\n</code></pre></li> <li>Verify installation by running <code>sudo docker --version</code>.</li> </ul>","tags":["set up","docker","container"]},{"location":"setting_up/git/","title":"Git","text":"<pre><code>    git init\n    git add README.md\n    git commit -m \"first commit\"\n    git branch -M main\n    git remote add origin https://github.com/ethantrainshard/ollama-server-docker.git\n    git push -u origin main\n</code></pre> <pre><code>    # Push an existing repo using Command Line\n    git remote add origin https://github.com/ethantrainshard/ollama-server-docker.git\n    git branch -M main\n    git push -u origin main\n</code></pre>"},{"location":"setting_up/main/","title":"Setting Up Docker and Environments for Local Development","text":"<p>As a Developer, I have learnt that we can do a lot of things on the local machine. We can develop, run containers, and test our applications without having to deploy them to a production environment. For this reason, I have created this guide to help you set up Docker, tools and environments for local development. Keep in mind that these are some of the tools that I use, but there are many other options available out there.</p> <p>Setting up a local machine may be a daunting task based on the device that you are using. For example, I have tried to use a MacBook to perform forensics during my Uni days, and I almost gave up. So setting up with the tools you are comfortable with on the right devices, will help make your life and learning simpler and more productive.</p>"},{"location":"setting_up/main/#prerequisites","title":"Prerequisites","text":"<ul> <li>You will need to have a desktop/laptop, that is powerful enough for your to develop, create and test applications.</li> <li>A curious mind, as you will be learning new things every day, and searching for solutions to problems.</li> </ul>"},{"location":"setting_up/main/#tools-and-applications","title":"Tools and Applications","text":"<p>These are the tools that I have been using since the start of my journey. They are not the only ones available out there, but they are the ones that I find most useful:</p> <ul> <li>Docker - A platform for developing, shipping, and running applications.</li> <li>VS Code - A source-code editor made by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git control, syntax highlighting, intelligent code completion, snippets, and code refactoring. Comes with a variety of extensions that can be installed from the Visual Studio Code Marketplace.</li> <li>PyEnv - A simple Python version management tool.</li> <li>Poetry - A packaging and dependency management library for Python.</li> <li>Git- A distributed version control system that tracks changes in source code during software development. It allows multiple developers to work on the same project without interfering with each other's work. (WIP)</li> <li>UV - Similar to Poetry, it is a packaging and dependency management library for Python, but faster and more efficient.</li> <li>Notion - A productivity platform that combines note-taking, task management, and project collaboration into one place. It allows users to create and organize notes, tasks, and projects in a visual way, making it easier to stay organized and focused. (WIP)</li> </ul>"},{"location":"setting_up/poetry/","title":"Poetry - Packaging and Dependency Management","text":"","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/poetry/#description","title":"Description","text":"<p>Poetry is a packaging and dependency management tool for Python. It simplifies the process of managing dependencies and packaging your Python projects, ensuring they are easily shareable and deployable.</p> <p>It is an excellent tool for Python developers, simplifying the process of managing dependencies and packaging projects. Its key features make it a valuable addition to any development workflow.</p>","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/poetry/#key-features","title":"Key Features","text":"<ol> <li>Dependency Management: Manages project dependencies in an isolated environment. Version Constraints: Specifies version constraints for packages to ensure compatibility.</li> <li>Virtual Environment Management: Automatically manages virtual environments for each project.</li> <li>Packaging &amp; Distribution: Simplifies the packaging and distribution of Python projects.</li> <li>Consistent Project Structure: Ensures consistent structure across different projects.</li> </ol>","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/poetry/#installation-methods","title":"Installation Methods","text":"","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/poetry/#1-using-pip-pythons-package-installer","title":"1. Using pip (Python's Package Installer)","text":"<ul> <li>Open a terminal and run:     <pre><code>    pip install poetry\n</code></pre></li> </ul>","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/poetry/#2-installing-from-source","title":"2. Installing from Source","text":"<ul> <li>Clone the Poetry repository to your local machine:     <pre><code>    git clone https://github.com/python-poetry/poetry.git ~/.poetry\n</code></pre></li> <li>Add the following lines to your shell configuration file (<code>.bashrc</code>, <code>.zshrc</code>, etc.):     <pre><code>    export PATH=\"$HOME/.poetry/bin:$PATH\"\n</code></pre></li> <li>Apply the changes by sourcing your shell configuration file:     <pre><code>    source ~/.bashrc\n</code></pre>     or     <pre><code>    source ~/.zshrc\n</code></pre></li> </ul>","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/poetry/#3-using-homebrew-macos","title":"3. Using Homebrew (macOS)","text":"<ul> <li>Open a terminal and run:     <pre><code>    brew install poetry\n</code></pre></li> </ul>","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/poetry/#4-using-scoop-windows","title":"4. Using Scoop (Windows)","text":"<ul> <li>Install Scoop if you haven't already by following the instructions on Scoop's website.</li> <li>Open PowerShell as Administrator and run:     <pre><code>    scoop bucket add extras\n    scoop install poetry\n</code></pre></li> </ul>","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/poetry/#basic-commands","title":"Basic Commands","text":"<ul> <li>Initialize a new Poetry project:     <pre><code>    poetry new my-project\n</code></pre></li> <li>Install dependencies from <code>pyproject.toml</code>:     <pre><code>    poetry install\n</code></pre></li> <li>Add a dependency to your project:     <pre><code>    poetry add requests\n</code></pre></li> <li>Build your project package:     <pre><code>   poetry build\n</code></pre></li> <li>Publish your package to PyPI:     <pre><code>   poetry publish\n</code></pre></li> </ul>","tags":["set up","poetry","python","dependency management","version management"]},{"location":"setting_up/pyenv/","title":"Pyenv - Python Version Management","text":"","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/pyenv/#description","title":"Description","text":"<p>Pyenv is a command-line utility that allows you to manage multiple Python versions on your system. It simplifies the process of installing, switching between, and managing different versions of Python without affecting the global Python environment. </p> <p>It is a powerful tool that helps developers manage multiple Python versions efficiently and easily, making it an essential part of the development workflow.</p>","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/pyenv/#key-features","title":"Key Features","text":"<ul> <li>Multiple Python Versions: Pyenv enables you to have multiple Python versions installed simultaneously.</li> <li>Version Management: Easily switch between different Python versions as needed for various projects.</li> <li>Shell Integration: Provides shell functions that simplify working with different Python versions.</li> <li>Compatibility: Works on Unix-like operating systems, including macOS and Linux.</li> </ul>","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/pyenv/#pros","title":"Pros","text":"<ul> <li>Isolation: Each Python version can be configured independently, avoiding conflicts between project requirements.</li> <li>Simplicity: Easy to install and use, reducing the complexity of managing multiple Python environments.</li> <li>Flexibility: Supports both global and local Python versions for different projects.</li> <li>Automation: Automates the process of switching between Python versions, saving time.</li> </ul>","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/pyenv/#installation-methods","title":"Installation Methods","text":"","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/pyenv/#1-using-pyenv-installer-recommended","title":"1. Using pyenv-installer (Recommended)","text":"<ul> <li>Open a terminal and run:     <pre><code>    curl https://pyenv.run | bash\n</code></pre>     or     <pre><code>    wget https://pyenv.run | bash\n</code></pre></li> <li>Follow the installation instructions displayed in the terminal.</li> </ul>","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/pyenv/#2-manual-installation","title":"2. Manual Installation","text":"<ul> <li>Clone the pyenv repository to your home directory:     <pre><code>    git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n</code></pre></li> <li>Add the following lines to your shell configuration file (<code>.bashrc</code>, <code>.zshrc</code>, etc.):     <pre><code>    export PYENV_ROOT=\"$HOME/.pyenv\"\n    export PATH=\"$PYENV_ROOT/bin:$PATH\"\n    if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n        eval \"$(pyenv init --path)\"\n        eval \"$(pyenv virtualenv-init -)\"\n    fi\n</code></pre></li> <li>Apply the changes by sourcing your shell configuration file:     <pre><code>    source ~/.bashrc\n</code></pre>     or     <pre><code>    source ~/.zshrc\n</code></pre></li> </ul>","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/pyenv/#3-using-homebrew-macos","title":"3. Using Homebrew (macOS)","text":"<ul> <li>Open a terminal and run:     <pre><code>    brew update\n    brew install pyenv\n</code></pre></li> <li>Follow the installation instructions displayed in the terminal.</li> </ul>","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/pyenv/#basic-commands","title":"Basic Commands","text":"<ul> <li>Install a specific Python version:     <pre><code>    pyenv install 3.9.7\n</code></pre></li> <li>Set a global Python version:     <pre><code>    pyenv global 3.9.7\n</code></pre></li> <li>List all installed Python versions:     <pre><code>    pyenv versions\n</code></pre></li> <li>Create a virtual environment for a project:     <pre><code>    pyenv virtualenv 3.9.7 myproject-env\n    pyenv activate myproject-env\n</code></pre></li> </ul>","tags":["set up","pyenv","python","version management"]},{"location":"setting_up/uv/","title":"UV - Alternative to Poetry","text":"<p>I have been using UV for a while and it has been working well for me. It is a great alternative to Poetry if you are looking for something that is more lightweight and easier to use. </p> <p>UV is an extremely fast Python package installer and resolver, written in Rust, and a single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more. It is designed to be fast and efficient, making it ideal for projects with many dependencies. UV is created by the company Astral, who is also the creators of ruff, a linter for Python. Check them out at https://astral.dev/uv.</p> <p>Here are some of the key features of UV:</p> <ul> <li>Lightweight: UV is a lightweight tool that does not require any dependencies other than Python.</li> <li>Easy to Use: UV is easy to use and has a simple command-line interface.</li> <li>Dependency Management: UV can manage dependencies for your project, including installing and updating packages.</li> <li>Version Management: UV can manage the version of Python that you are using for your project.</li> </ul>","tags":["set up","poetry","dependency management","version management"]},{"location":"setting_up/uv/#installation","title":"Installation","text":"<ul> <li>On macOS and Linux</li> </ul> <pre><code>    # On macOS and Linux.\n    curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <ul> <li>On Windows</li> </ul> <pre><code>    # On Windows.\n    powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>","tags":["set up","poetry","dependency management","version management"]},{"location":"setting_up/uv/#my-workflow-using-uv","title":"My Workflow using UV","text":"<ol> <li> <p>Install the version of Python that I want to use for my project.</p> <pre><code>    # This is for multiple Python version, you can just indicate the version you want to install\n    uv python install 3.10 3.11 3.12\n    Searching for Python versions matching: Python 3.10\n    Searching for Python versions matching: Python 3.11\n    Searching for Python versions matching: Python 3.12\n    Installed 3 versions in 3.42s\n    + cpython-3.10.14-macos-aarch64-none\n    + cpython-3.11.9-macos-aarch64-none\n    + cpython-3.12.4-macos-aarch64-none\n</code></pre> </li> <li> <p>Ensure that the python version that you wanted is installed</p> <p><pre><code>    uv python list\n</code></pre> 3. Create the project folder using uv. It will create a folder with all the necessary files and virtual environment for your project.</p> <pre><code>    uv init &lt;project name&gt;\n</code></pre> <pre><code>    .\n    \u251c\u2500\u2500 .venv\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 pyvenv.cfg\n    \u251c\u2500\u2500 .python-version\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 hello.py\n    \u251c\u2500\u2500 pyproject.toml\n    \u2514\u2500\u2500 uv.lock\n</code></pre> </li> <li> <p>Install dependencies using <code>uv add</code>. You can also remove the dependencies using <code>uv remove</code></p> <pre><code>    # Add a package to your project's virtual environment\n    uv add &lt;package name&gt;\n\n    # Install a specific version of a package\n    uv add &lt;package name&gt;==&lt;version number&gt;\n\n    # Remove a package from your project's virtual environment\n    uv remove &lt;package name&gt;\n</code></pre> </li> <li> <p>To run the project using the virtual environment created, you can use <code>uv run</code>.</p> <pre><code>    # Run a Python script in your project's virtual environment\n    uv run &lt;Python file&gt;\n\n    # Run a Flask application using uv (for example)\n    uv run flask app.py --host 0.0.0.0 --port 5000\n</code></pre> </li> </ol> <p>Once you have the hang of uv, it will be easy to manage your project's virtual environment and dependencies.</p>","tags":["set up","poetry","dependency management","version management"]},{"location":"setting_up/vscode/","title":"VSCode - IDE for Developers","text":"","tags":["Set Up","VScode","IDE","Tools"]},{"location":"setting_up/vscode/#description","title":"Description","text":"<p>VSCode (Visual Studio Code) is an open-source code editor made by Microsoft that supports programming in multiple languages, including JavaScript, Python, C++, Java, and many others. It offers a lightweight yet powerful toolset, allowing developers to quickly build, debug, and test applications with the help of extensions, which add functionality to the core editor.</p> <p>It is a powerful and flexible tool that offers both beginner-friendly features and advanced capabilities for professional developers, making it an excellent choice for a wide range of programming tasks.</p> <p></p>","tags":["Set Up","VScode","IDE","Tools"]},{"location":"setting_up/vscode/#key-features","title":"Key Features","text":"<ul> <li>Lightweight &amp; Fast: VSCode is designed for efficiency, requiring minimal system resources.</li> <li>Rich Extensions: A vast ecosystem of extensions that can enhance its functionality based on developer needs.</li> <li>IntelliSense: Provides intelligent code completion and suggestions, improving productivity.</li> <li>Debugger Support: Supports debugging for various languages directly from the editor.</li> <li>Git Integration: Built-in support for Git version control.</li> <li>Terminal &amp; SSH: Integrated terminal and SSH capabilities make it easy to work with remote servers.</li> </ul>","tags":["Set Up","VScode","IDE","Tools"]},{"location":"setting_up/vscode/#pro-features","title":"Pro Features","text":"<ul> <li>Multi-language Support: Excellent support for multiple programming languages.</li> <li>Extensibility: Highly extensible through a rich plugin ecosystem.</li> <li>User-Friendly Interface: Intuitive UI and customizable settings.</li> <li>Cross-Platform: Available on Windows, macOS, and Linux.</li> </ul>","tags":["Set Up","VScode","IDE","Tools"]},{"location":"setting_up/vscode/#installation-methods","title":"Installation Methods","text":"","tags":["Set Up","VScode","IDE","Tools"]},{"location":"setting_up/vscode/#1-windows-installation","title":"1. Windows Installation","text":"<ul> <li>Download the installer from the VSCode website.</li> <li>Run the downloaded <code>.exe</code> file and follow the installation wizard to complete the setup.</li> </ul>","tags":["Set Up","VScode","IDE","Tools"]},{"location":"setting_up/vscode/#2-macos-installation","title":"2. macOS Installation","text":"<ul> <li>Download the <code>.zip</code> archive from the VSCode website.</li> <li>Unzip the contents and move the Visual Studio Code.app to your Applications folder.</li> </ul>","tags":["Set Up","VScode","IDE","Tools"]},{"location":"setting_up/vscode/#3-linux-installation","title":"3. Linux Installation","text":"<ul> <li>For Debian-based systems (like Ubuntu), open a terminal and run:   <pre><code>  sudo apt update\n  sudo apt install software-properties-common apt-transport-https wget\n  wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\n  sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/\n  sudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" &gt; /etc/apt/sources.list.d/vscode.list'\n  rm -f packages.microsoft.gpg\n  sudo apt update\n  sudo apt install code\n</code></pre></li> <li>For Red Hat-based systems (like Fedora), open a terminal and run:     <pre><code>    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\n    sudo sh -c 'echo -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" &gt; /etc/yum.repos.d/vscode.repo'\n    sudo dnf check-update\n    sudo dnf install code\n</code></pre></li> </ul>","tags":["Set Up","VScode","IDE","Tools"]},{"location":"trips/tokyo/","title":"Overseas Trip to Tokyo","text":"<p>Website for more information: Live Japan</p>","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#accommodation","title":"Accommodation","text":"<ul> <li>Tokyo Stay: ANA InterContinential We have a very pleasant experience in ANA InterContinential. The hotel is located in the heart of Tokyo, and it's very convenient for us to go out and explore the city. The location of the hotel is also very convenient to get to the train station, Tamemi-sando Station, which is a 5 minutes walk from the hotel.  The hotel staffis very friendly and helpful, and they always go out of their way to make sure we have a comfortable stay. There are various convenience stores nearby - Family Mart, Lawson, selling cheap and nice food and drinks. </li> <li>Mount Fuji Stay: Hotel Ookie</li> </ul>","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#transportation","title":"Transportation","text":"<ul> <li>Tokyo Metro Train   Travelling on the train is the most convenient way to travel around Tokyo. The train stations are well connected and it's very easy to get from one station to another.    We have used the Tokyo Metro Train extensively during our stay, and it has been a great experience.   The train stations are also very clean and well-maintained, and it's easy to find your way around.   Though there are many train stations and that requires you to change to different lines to reach your destination, it's always a good idea to check the schedule before you leave your station as there are times when trains may be delayed.</li> </ul> <p>Apps like Google Maps and Citymapper are very useful when it comes to navigating around Tokyo. They provide real-time information on train schedules, bus timings, and other forms of transportation.  - Driving   Driving in the city area is not advisable as the roads are very crowded and the traffic is heavy, especially during the peak hours. However, if you are to travel out of Tokyo city area, it can be one of the methods, especially travelling with young children.   You can rent the car from the hotel, or they have car rental companies located in various parts of the city.    - Things to take note:     - International driving license is required for Singaporeans. You can apply for the International Driving License online or at the physical counter     - When making the car rental booking online, make sure that you request for ETC (Electronic Toll Collection) as it is mandatory in Japan. It will save you a lot of time and hassle when driving around the city. You will need to pay for the usage of the toll after finishing the rental.     Also, if you are travelling during Autumn/Winter, remember to request for a snow tire kit as the roads can be slippery and icy.     - Follow the speed limit and be aware of the traffic rules.     - Seatbelts are mandatory for all passengers, including children.     - Do drive very carefully on expressways outside Toyko city area, as the roads may not be lit.     - Car rental companies in Japan requires you to have a local phone number. This is for in an case of emergency to contact you. They will ask you to provide and try calling you on the spot.     - GPS in the car ma not be in English, so Google Maps will come in handy.      - Parking in the city area is very expensive, therefore not advisable to drivearound the city area.     - Drivers will be on the right hand side of the car, similar to how Singapore cars are driven.  - Airport Transfers   They do have cheap airport transfers, but it is recommended to book in advance as they can be limited during peak times. The travelling will be around the same as taking the train, however, the airport transfer will be more convenient as the bus driver will help you with loading and unloading the luggage onto the bus, and also ensuring that you reach the hotel.   - Book your airport transfer through the airport's official website or a reputable travel agency (Klook, KKday, JP Limousine Bus)   - Do not book airport transfers through unofficial or unknown websites as they may be scams.   - Check whether the airport transfer goes to your accommodation, as some transfers may drop off at a different location.</p> <p>P.S. - If you are planning to bring your scroller with you during the trip, you may want to think twice, as there are a lot of staircases when travelling on the trains.</p>","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#attractions","title":"Attractions","text":"","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#sanrio-puroland","title":"Sanrio Puroland","text":"<p> This attraction is one of the highlights of the trip for us, as kids will love this place. It is very similar to Disneyland, but it's more affordable and located in the heart of Tokyo.  All the characters from Sanrio will be there - Hello Kitty, My Melody, Cinnamon Roll, and many more. It's a great place for kids to have fun and play with their favorite characters.  If you are worried about weather, not to worry, as it is all indoors and there are plenty of places to play, even if it rains. It is a 4-5 stories high building over a very large area.  You can purchase your tickets through [Klook](https://www.klook.com/activity/2276-sanrio-puroland-tokyo/?spm=SearchResult.SearchResult_LIST&amp;clickId=05534189c0).  More information: [Sanrio Puroland](https://en.puroland.jp/language/) </p>","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#nishiginza-shopping-mall","title":"Nishiginza Shopping Mall","text":"<p> After the trip to Sanrio Puroland, you may want to go to Nishiginza Shopping Mall for some shopping and dining.  It is a very popular shopping mall located in the heart of Tokyo, with many high-end stores and restaurants. It's a great place to relax after a long day of sightseeing.  ![Sanrio World](https://a.mktgcdn.com/p/ge_Em8eodu7u6J7pQSuBFCZ4RvegOGzQr1eiJ_R7Jtw/4032x3024.jpg)  Most importantly, there is a Sanrio Puroland store where you can get souviours from the famous Sanrio characters. Some of the merchandise you can get include plush toys, keychains, and other Sanrio products, are not found in Sanrio Puroland. So Sanrio lovers will want to check this place out.  Address: [104-0061 Tokyo, Chuo City, Ginza, 4 Chome\u22121\u2212\u5148 NISHIGINZA](https://www.google.com/maps?client=safari&amp;sca_esv=813837a4ab300c6b&amp;rls=en&amp;sxsrf=ADLYWIIOIqryuJ5VPcZoQAGCc6PYGIkpiQ:1735978184864&amp;biw=1512&amp;bih=860&amp;dpr=2&amp;um=1&amp;ie=UTF-8&amp;fb=1&amp;gl=sg&amp;sa=X&amp;geocode=KQEOBJzlixhgMe2kBIaSZHSn&amp;daddr=Japan,+\u3012104-0061+Tokyo,+Chuo+City,+Ginza,+4+Chome%E2%88%921%E2%88%92\u5148+NISHIGINZA)  The Sanrio World store is at Level 2. </p>","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#senso-ji-temple","title":"Senso-ji Temple","text":"","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#disneyland-tokyo","title":"Disneyland Tokyo","text":"","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#shibuya-sky-tower","title":"Shibuya Sky Tower","text":"","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#mount-fuji","title":"Mount Fuji","text":"","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#things-to-do","title":"Things to do","text":"","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#things-not-to-do","title":"Things not to do","text":"","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"trips/tokyo/#1-try-not-to-bring-stroller","title":"1. Try not to bring stroller","text":"","tags":["Overseas Travel","Tokyo","Experience"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/general/","title":"General","text":""},{"location":"blog/category/tech/","title":"Tech","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#ai","title":"AI","text":"<ul> <li>Project: Ollama Server Docker</li> </ul>"},{"location":"tags/#chat-interface","title":"Chat Interface","text":"<ul> <li>Exploring OpenWeb UI: The Chat Interface for Ollama</li> </ul>"},{"location":"tags/#docker","title":"Docker","text":"<ul> <li>Nginx Proxy Manager: A Comprehensive Guide</li> <li>Ollama - Your Local LLM Server</li> <li>Exploring OpenWeb UI: The Chat Interface for Ollama</li> <li>Twingate Connector - Local VPN Service</li> </ul>"},{"location":"tags/#experience","title":"Experience","text":"<ul> <li>Overseas Trip to Tokyo</li> </ul>"},{"location":"tags/#ide","title":"IDE","text":"<ul> <li>VSCode - IDE for Developers</li> </ul>"},{"location":"tags/#lets-encrypt","title":"Let's Encrypt","text":"<ul> <li>Nginx Proxy Manager: A Comprehensive Guide</li> </ul>"},{"location":"tags/#local-ai","title":"Local AI","text":"<ul> <li>Ollama - Your Local LLM Server</li> <li>Exploring OpenWeb UI: The Chat Interface for Ollama</li> </ul>"},{"location":"tags/#nginx-proxy-manager","title":"Nginx Proxy Manager","text":"<ul> <li>Nginx Proxy Manager: A Comprehensive Guide</li> </ul>"},{"location":"tags/#ollama","title":"Ollama","text":"<ul> <li>Ollama - Your Local LLM Server</li> </ul>"},{"location":"tags/#overseas-travel","title":"Overseas Travel","text":"<ul> <li>Overseas Trip to Tokyo</li> </ul>"},{"location":"tags/#self-signed-certificates","title":"Self-Signed Certificates","text":"<ul> <li>Nginx Proxy Manager: A Comprehensive Guide</li> </ul>"},{"location":"tags/#set-up","title":"Set Up","text":"<ul> <li>VSCode - IDE for Developers</li> </ul>"},{"location":"tags/#setup","title":"Setup","text":"<ul> <li>Exploring OpenWeb UI: The Chat Interface for Ollama</li> </ul>"},{"location":"tags/#step-by-step","title":"Step-By-Step","text":"<ul> <li>Nginx Proxy Manager: A Comprehensive Guide</li> <li>Ollama - Your Local LLM Server</li> <li>Twingate Connector - Local VPN Service</li> </ul>"},{"location":"tags/#tokyo","title":"Tokyo","text":"<ul> <li>Overseas Trip to Tokyo</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>VSCode - IDE for Developers</li> </ul>"},{"location":"tags/#twingate","title":"Twingate","text":"<ul> <li>Twingate Connector - Local VPN Service</li> </ul>"},{"location":"tags/#ui","title":"UI","text":"<ul> <li>Exploring OpenWeb UI: The Chat Interface for Ollama</li> </ul>"},{"location":"tags/#vpn","title":"VPN","text":"<ul> <li>Twingate Connector - Local VPN Service</li> </ul>"},{"location":"tags/#vscode","title":"VScode","text":"<ul> <li>VSCode - IDE for Developers</li> </ul>"},{"location":"tags/#container","title":"container","text":"<ul> <li>Docker - Containerization for Developers</li> </ul>"},{"location":"tags/#dependency-management","title":"dependency management","text":"<ul> <li>Poetry - Packaging and Dependency Management</li> <li>UV - Alternative to Poetry</li> </ul>"},{"location":"tags/#docker_1","title":"docker","text":"<ul> <li>Ollama - Your Local LLM Server</li> <li>Project: Ollama Server Docker</li> <li>Docker - Containerization for Developers</li> </ul>"},{"location":"tags/#first-post","title":"first post","text":"<ul> <li>Hi, this is my first post</li> </ul>"},{"location":"tags/#llm","title":"llm","text":"<ul> <li>Project: Ollama Server Docker</li> </ul>"},{"location":"tags/#local-ai_1","title":"local AI","text":"<ul> <li>Ollama - Your Local LLM Server</li> </ul>"},{"location":"tags/#ollama_1","title":"ollama","text":"<ul> <li>Ollama - Your Local LLM Server</li> <li>Project: Ollama Server Docker</li> </ul>"},{"location":"tags/#poetry","title":"poetry","text":"<ul> <li>Poetry - Packaging and Dependency Management</li> <li>UV - Alternative to Poetry</li> </ul>"},{"location":"tags/#project","title":"project","text":"<ul> <li>Project: Ollama Server Docker</li> </ul>"},{"location":"tags/#pyenv","title":"pyenv","text":"<ul> <li>Pyenv - Python Version Management</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>Poetry - Packaging and Dependency Management</li> <li>Pyenv - Python Version Management</li> </ul>"},{"location":"tags/#server","title":"server","text":"<ul> <li>Project: Ollama Server Docker</li> </ul>"},{"location":"tags/#set-up_1","title":"set up","text":"<ul> <li>Docker - Containerization for Developers</li> <li>Poetry - Packaging and Dependency Management</li> <li>Pyenv - Python Version Management</li> <li>UV - Alternative to Poetry</li> </ul>"},{"location":"tags/#step-by-step_1","title":"step by step","text":"<ul> <li>Ollama - Your Local LLM Server</li> </ul>"},{"location":"tags/#version-management","title":"version management","text":"<ul> <li>Poetry - Packaging and Dependency Management</li> <li>Pyenv - Python Version Management</li> <li>UV - Alternative to Poetry</li> </ul>"}]}